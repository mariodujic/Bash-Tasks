#!/usr/bin/env bash

flag=$1
add_flag="-a"
remove_flag="-rm"
remove_all_flag="-d"
show_flag="-s"
undo_flag="-u"
help_flag="-h"
directory=~/.tasks
file="$directory/storage.txt"
backup_file="$directory/backup.txt"
temp_file="$directory/storage-temp.txt"

green='\033[0;32m'
reset_color='\e[0m'

storeBackup() {
  cp "$file" "$backup_file"
}

addTask() {
  storeBackup
  local current_date_time=$(date +"%d.%m.%Y %H:%M")
  local task=$1
  local task_log="$1   |   $current_date_time"
  if [ -z "$task_log" ]; then
    echo "Missing task argument. Type $help_flag for help."
    exit 1
  else
    echo "$task_log" >>$file
    echo -e "${green}Added task:${reset_color} $task"
  fi
}

removeTask() {
  storeBackup
  local task="$1"
  if [ -z "$task" ]; then
    echo "Missing row number. Type $help_flag for help."
    exit 1
  fi
  local index=0
  truncate -s 0 $temp_file
  cat $file | while read -r line; do
    index=$((index + 1))
    if [ $index != "$task" ]; then
      echo "$line" >>$temp_file
    else
      echo "Removed task: $line"
    fi
  done
  mv $temp_file $file
}

removeAllTasks() {
  storeBackup
  read -p "Are you sure you want to remove all tasks [Y/n]" -r answer
  if [[ "$answer" == [Yy] ]]; then
    truncate -s 0 $file
    echo "Tasks removed."
  fi
}

showTasks() {
  local index=0
  echo -e "${green}Tasks:${reset_color}"
  cat $file | while read -r line; do
    index=$((index + 1))
    echo -e "${green}$index.${reset_color} $line"
  done
}

undo() {
  cp "$backup_file" "$file"
}

help() {
  echo """
  Usage:
      -a <task>         Add task to list.
      -rm <row_number>  Remove task from list.
      -d                Remove all tasks.
      -u                Undo added/removed tasks.
      -s                Show all tasks.
  """
}

createStorageIfMissing() {
  if [ ! -d "$directory" ]; then
    mkdir $directory
  fi
  if [ ! -f "$file" ]; then
    touch $file
  fi
}

createStorageIfMissing

if [ "$flag" == "$add_flag" ]; then
  addTask "${*:2}"
elif [ "$flag" == "$remove_flag" ]; then
  removeTask "${*:2}"
elif [ "$flag" == "$remove_all_flag" ]; then
  removeAllTasks
elif [ "$flag" == "$show_flag" ]; then
  showTasks
elif [ "$flag" == "$undo_flag" ]; then
  undo
elif [ "$flag" == "$help_flag" ]; then
  help
else
  echo "Invalid argument. Type $help_flag for instructions."
fi